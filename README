This is a quick and dirty example of how to use the inflection
server.  Note: it does string copies and prints strings without
checking lengths carefully and without verifying that the
characters are all printable.  However, the buffers are much
larger than the example prompts and replies, so there won't be
a problem unless you purposefully to cause one.

To try communication, use two computers.  You can choose two in
the Xinu lab, say xinu11.cs.purdue.edu and xinu12.cs.purdue.edu.

Use a separate window for each.  Fortunately, you will have the
same home directory across all machines, so the files are shared

On one computer type:

	./example_reg  UUUU  xxx yyy

where UUUU is your career account login, and xxx and yyy are arbitrary
strings (you can actually use xxx and yyy for the test).

On the other computer, type:

	./example_acc  UUUU  xxx yyy

where the arguments are *exactly* the same as above.

The two programs should contact one another, exchange messages,
and display the results.  You can try modifying the prompt in the
access message.  You can also register multiple services
simultaneously, such as running 


	./example_reg  UUUU  xxx serv1 &

	./example_reg  UUUU  xxx serv2

Then try accessing them.




// 08/14/17 Modifications + Helpful Notes

When accessing an embedded system:

access variables - username, pass, embedded_sys_name, action, [data]

username, pass are the same as above. I chose to register each system as a service 
and then pass an additional action to the system, which determines what data the requesting client 
gets back.

Example:

Get Temp
    /example_acc chaudhu1 pass pi 1 payload_string
Get Time
    /example_acc chaudhu1 pass pi 2 payload_string



Note #1: 
To prevent any issues with registering I made the following design choices:
- Before registering a system/service I send a clear message
- The inflection server will close the embedded system socket when a client 
    tries access the device and closes its socket. Therefore, one must reconnect the embedded system after 
    serving data to the inflection server. I chose to also make a call to deregister the service prior to reconnecting
    again as a safeguard to prevent leaking a slot.






//

